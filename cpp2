#include <stdio.h>
#include <conio.h>
#include <graphics.h>
#include <stdlib.h>
#include <windows.h>
#include <time.h>

#define CLOUD_COUNT 5

// Khai báo mảng vị trí đám mây
long long cloud_positions[CLOUD_COUNT][2];

// Hàm vẽ mặt trời
void sun() {
    setcolor(WHITE);
    setfillstyle(SOLID_FILL, YELLOW);
    pieslice(550, 60, 0, 360, 50);
}

// Hàm vẽ đám mây
void may() {
    setcolor(WHITE);
    setfillstyle(SOLID_FILL, WHITE);
    for (int k = 0; k < CLOUD_COUNT; k++) {
        fillellipse(cloud_positions[k][0], cloud_positions[k][1], 50, 40);
        fillellipse(cloud_positions[k][0] + 50, cloud_positions[k][1], 40, 30);
        fillellipse(cloud_positions[k][0] - 50, cloud_positions[k][1], 40, 30);
        fillellipse(cloud_positions[k][0] + 30, cloud_positions[k][1] - 20, 40, 30);
        fillellipse(cloud_positions[k][0] - 30, cloud_positions[k][1] - 20, 40, 30);
    }
}
// Hàm vẽ núi
void nui() {
    setcolor(GREEN);
    setfillstyle(SOLID_FILL, DARKGRAY);
    int mountain1[] = {0, 300, 200, 150, 400, 300, 0, 300};
    fillpoly(4, mountain1);
    
    int mountain2[] = {300, 300, 500, 100, 700, 300, 300, 300};
    fillpoly(4, mountain2);
}
//hàm vẽ chim
void drawBird(int x, int y) {
    // Vẽ thân chim (hình elip)
    setfillstyle(SOLID_FILL, BLACK);
    fillellipse(x, y, 100, 50); // tâm (x, y), bán kính ngang 100, bán kính dọc 50

    // Vẽ đầu chim (hình tròn)
    setfillstyle(SOLID_FILL, BLACK);
    fillellipse(x + 100, y, 30, 30); // đầu nằm bên phải thân chim

    // Vẽ mỏ (hình tam giác nhỏ)
    setfillstyle(SOLID_FILL, BLACK);
    line(x + 130, y, x + 150, y - 10); // phần trên của mỏ
    line(x + 130, y, x + 150, y + 10); // phần dưới của mỏ
    line(x + 150, y - 10, x + 150, y + 10); // nối hai điểm của mỏ

    // Vẽ cánh (mô phỏng cánh vỗ)
    static bool wingUp = false;
    if (wingUp) {
        line(x - 50, y, x - 150, y - 100); // cánh trái bay lên
        line(x - 150, y - 100, x - 100, y); // cánh trái trở về thân
        line(x + 50, y, x + 150, y - 100); // cánh phải bay lên
        line(x + 150, y - 100, x + 100, y); // cánh phải trở về thân
    } else {
        line(x - 50, y, x - 150, y + 100); // cánh trái bay xuống
        line(x - 150, y + 100, x - 100, y); // cánh trái trở về thân
        line(x + 50, y, x + 150, y + 100); // cánh phải bay xuống
        line(x + 150, y + 100, x + 100, y); // cánh phải trở về thân
    }
    wingUp = !wingUp; // thay đổi trạng thái cánh cho khung hình tiếp theo
}

// Hàm tạo chuyển động bay cho nhiều con chim
void moveBirds() {
    int x1 = 0, y1 = 200;  // Vị trí chim thứ nhất
    int x2 = 200, y2 = 350;  // Vị trí chim thứ hai
    int x3 = 300, y3 = 450;  // Vị trí chim thứ ba

    while (x1 < getmaxx() + 200) { // Di chuyển chim từ trái sang phải

        drawBird(x1, y1);
        drawBird(x2, y2);
        drawBird(x3, y3);

        delay(50); // Dừng 100 ms giữa mỗi khung hình

        // Di chuyển từng con chim sang phải
        x1 += 10;
        x2 += 10;
        x3 += 10;
    }
}
// Hàm vẽ đường
void duong() {
    setfillstyle(1, LIGHTGREEN);
    bar(0, 450, 800, 500);
    sector(200, 350, 0, 180, 200, 100);
    sector(500, 350, 0, 180, 200, 100);

    setfillstyle(1, LIGHTGRAY);
    bar(0, 350, 800, 450);
    setlinestyle(0, 4, 2);
    line(0, 360, 800, 360);
    line(0, 440, 800, 440);
    for (long long i = 50; i <= 550; i += 100) {
        line(i, 400, i + 50, 400);
    }
}

int main() {
    int driver = 0, mode = 0, maloi;
    initgraph(&driver, &mode, (char*)"");
    int gd = DETECT, gm;
    initgraph(&gd, &gm, "C:\\Turboc3\\BGI");
    int x1 = 0, y1 = 240; // Chim 1
    int x2 = 200, y2 = 240; // Chim 2
    if ((maloi = graphresult()) != 0) {
        printf("Không thể khởi động đồ họa \n");
        printf("Mã lỗi : %d \n%s ", maloi, grapherrormsg(maloi));
        getch();
        exit(1);
    }

    srand(time(NULL)); // Khởi tạo seed cho random
    // Khởi tạo vị trí đám mây ngẫu nhiên
    for (int k = 0; k < CLOUD_COUNT; k++) {
        cloud_positions[k][0] = 100 + rand() % 600; // Vị trí X
        cloud_positions[k][1] = 70 + rand() % 100;  // Vị trí Y
    }

    long long i = 0, j = 0, m = 1, page = 0;
    long long max_width = getmaxx(); // Lấy giới hạn chiều rộng của màn hình

    while (1) {
        setactivepage(page);
        cleardevice(); // Xóa trang active trước khi vẽ

        setbkcolor(LIGHTBLUE);
        sun();
        may();
        duong();
        nui();
        moveBirds();

        // Vẽ nhân vật chạy
        setcolor(WHITE);
        circle(50 + i, 300 + j, 15);  // Đầu
        line(50 + i, 315 + j, 50 + i, 350 + j);  // Thân
        line(50 + i, 330 + j, 20 + i, 320 + j);  // Tay trái
        line(50 + i, 330 + j, 80 + i, 320 + j);  // Tay phải

        // Chân
        if (m % 2 == 0) {
            line(50 + i, 350 + j, 50 + i, 390 + j);  // Chân thẳng
        } else {
            line(50 + i, 350 + j, 35 + i, 390 + j);  // Chân trái
            line(50 + i, 350 + j, 65 + i, 390 + j);  // Chân phải
        }

        // Di chuyển theo phím
        if (GetAsyncKeyState(VK_LEFT)) {
            if (i > -40) { // Giới hạn bên trái
               i -= 5;
                m++;
            }
        }
        if (GetAsyncKeyState(VK_RIGHT)) {
            if (i < max_width - 50) { // Giới hạn bên phải
                i += 5;
                m++;
            }
        }
        if (GetAsyncKeyState(VK_ESCAPE)) { // Thoát bằng phím ESC
            break;
        }
        if (GetAsyncKeyState(VK_UP)) { // Di chuyển lên
            j -= 5;
        }
        if (GetAsyncKeyState(VK_DOWN)) { // Di chuyển xuống
            j += 5;
        }

        // Cập nhật vị trí đám mây để tạo hiệu ứng động
        for (int k = 0; k < CLOUD_COUNT; k++) {
            cloud_positions[k][0] += 1; // Di chuyển đám mây sang phải
            if (cloud_positions[k][0] > max_width) {
                cloud_positions[k][0] = -100; // Nếu ra ngoài, trở lại bên trái
                cloud_positions[k][1] = 70 + rand() % 100; // Thay đổi vị trí Y ngẫu nhiên
            }
        }

        setvisualpage(page); // Hiển thị trang hiện tại

        page = 1 - page; // Chuyển đổi giữa 2 trang

        delay(50); // Giảm độ trễ để chuyển trang mượt mà hơn
    }

    closegraph();
    return 0;
}
